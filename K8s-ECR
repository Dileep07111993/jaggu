eksctl create cluster --name=eksdemo1 \
                      --region=us-east-1 \
                      --zones=us-east-1a,us-east-1b \
                      --without-nodegroup 
eksctl utils associate-iam-oidc-provider \
    --region us-east-1 \
    --cluster eksdemo1 \
    --approve
eksctl create nodegroup --cluster=eksdemo1 \
                       --region=us-east-1 \
                       --name=eksdemo1-ng-public1 \
                       --node-type=t3.medium \
                       --nodes=2 \
                       --nodes-min=2 \
                       --nodes-max=4 \
                       --node-volume-size=20 \
                       --ssh-access \
                       --ssh-public-key=plural \
                       --managed \
                       --asg-access \
                       --external-dns-access \
                       --full-ecr-access \
                       --appmesh-access \
                       --alb-ingress-access 
---------------------------
push docker image to ECR

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 381492236261.dkr.ecr.us-east-1.amazonaws.com/eks/tomcat
docker tag tomcat-server:latest 381492236261.dkr.ecr.us-east-1.amazonaws.com/eks/tomcat:latest
docker push 381492236261.dkr.ecr.us-east-1.amazonaws.com/eks/tomcat:latest

------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubeapp-ecr
  labels:
    app: kubeapp-ecr
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kubeapp-ecr
  template:
    metadata:
      labels:
        app: kubeapp-ecr
    spec:
      containers:
        - name: kubeapp-ecr
          image: 180789647333.dkr.ecr.us-east-1.amazonaws.com/aws-ecr-kubenginx:1.0.0
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
          ports:
            - containerPort: 8080
---------------------------
apiVersion: v1
kind: Service
metadata:
  name: kubeapp-ecr-service
spec:
  type: LoadBalancer
  selector:
    app: kubeapp-ecr
  ports:
    - port: 80
      targetPort: 80
